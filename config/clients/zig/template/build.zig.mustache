// OpenFGA Zig SDK Build Configuration
const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    // Create a static library from the generated C code
    const c_lib = b.addStaticLibrary(.{
        .name = "{{packageName}}-c",
        .target = target,
        .optimize = optimize,
    });

    // Link required system libraries
    c_lib.linkLibC();
    c_lib.linkSystemLibrary("curl");

    // Add C source files (these will be generated by OpenAPI Generator)
    // Note: Update this list based on generated files
    c_lib.addCSourceFiles(.{
        .files = &.{
            "src/apiClient.c",
            "src/apiKey.c",
            "src/list.c",
            "src/binary.c",
            "external/cJSON.c",
            "api/OpenFgaAPI.c",
            // Model files will need to be added here
        },
        .flags = &.{
            "-std=c99",
            "-DCURL_STATICLIB",
        },
    });

    // Add include paths
    c_lib.addIncludePath(.{ .path = "include" });
    c_lib.addIncludePath(.{ .path = "model" });
    c_lib.addIncludePath(.{ .path = "api" });
    c_lib.addIncludePath(.{ .path = "external" });

    // Install the C library
    b.installArtifact(c_lib);

    // TODO: Create Zig wrapper module
    // This is where you would add the Zig wrapper code that provides
    // an idiomatic Zig interface to the C library
    
    // Example:
    // const openfga_module = b.addModule("{{packageName}}", .{
    //     .root_source_file = .{ .path = "zig/main.zig" },
    //     .target = target,
    //     .optimize = optimize,
    // });
    // openfga_module.linkLibrary(c_lib);

    // Unit tests
    const tests = b.addTest(.{
        .root_source_file = .{ .path = "unit-test/test_main.c" },
        .target = target,
        .optimize = optimize,
    });
    tests.linkLibrary(c_lib);

    const run_tests = b.addRunArtifact(tests);
    const test_step = b.step("test", "Run unit tests");
    test_step.dependOn(&run_tests.step);

    // Format step
    const fmt_step = b.step("fmt", "Format Zig code");
    const fmt = b.addFmt(.{
        .paths = &.{"zig"},
        .check = false,
    });
    fmt_step.dependOn(&fmt.step);
}
